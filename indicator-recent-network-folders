#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
MIT License

Copyright (c) 2020 Martinique

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

# Ubuntu/Debian dependencies: python3 python3-gi python3-urllib

import os
import sys
import argparse
import subprocess
from xml.parsers import expat
from urllib.parse import unquote,urlparse
import gi
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk, Gio, AppIndicator3

class IndicatorRecentNetwork:
  # List of accepted URL schemes and their corresponding icon names:
  BOOKMARK_TYPES = {'afp': 'gnome-fs-network', 'dav': 'gnome-fs-dav', 'davs': 'gnome-fs-dav', 'ftp': 'gnome-fs-ftp',
    'ftps': 'gnome-fs-ftp', 'ftpis': 'gnome-fs-ftp', 'sftp': 'gnome-fs-ssh', 'smb': 'gnome-fs-smb'}

  def __init__(self, count, file, browser):
    self.count = count
    self.file = file
    self.browser = browser
    self.schemes = tuple((p + ':' for p in self.BOOKMARK_TYPES.keys()))
    self.ind = AppIndicator3.Indicator.new('indicator-recent-network-folders', 'folder-recent', AppIndicator3.IndicatorCategory.APPLICATION_STATUS)
    self.ind.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
    self.ind.set_title('Recent Network Folders Indicator')
    self.update_menu()
    # Monitor changes in XML:
    self.monitor=Gio.File.new_for_path(self.file).monitor_file(Gio.FileMonitorFlags.NONE, None)
    self.monitor.connect('changed', self.on_xml_changed)

  # Minimalist parser to extract recent folders from XML file:
  def xmlparse(self):
    self.folders = {}
    p = expat.ParserCreate('UTF-8', None)
    p.StartElementHandler = self.xmlnode
    try: f = open(self.file, 'rb')
    except:
      print("Failed to open '%s'." % self.file)
      raise
    else:
      try: p.ParseFile(f)
      finally: f.close()

  def xmlnode(self, name, attrs):
    if name == 'bookmark' and 'href' in attrs and attrs['href'].startswith(self.schemes):
      path = attrs['href'].rsplit(os.path.sep, 1)[0]
      # Compare timestamps ('0' if not previously seen):
      self.folders[path] = max(self.folders.get(path, '0'), attrs['modified'], attrs['visited'])

  def create_menu_item(self, label, icon_name=None, tooltip=None):
    if icon_name:
      item = Gtk.ImageMenuItem()
      image = Gtk.Image()
      image.set_from_icon_name(icon_name, Gtk.IconSize.MENU)
      item.set_image(image)
      item.set_always_show_image(True)
    else: item = Gtk.MenuItem()
    if tooltip: item.set_tooltip_text(tooltip)
    item.set_label(label)
    return item

  def update_menu(self):
    menu=Gtk.Menu.new()
    self.ind.set_menu(menu)
    try: self.xmlparse()
    except Exception: pass
    if not self.folders:
      item = self.create_menu_item('No data available')
      item.set_sensitive(False)
      menu.append(item)
    else:
      # Sort times descending and limit count:
      flist = sorted(self.folders, key=self.folders.get, reverse=True)[:self.count]
      for f in flist:
        p = urlparse(f)
        item = self.create_menu_item(unquote(p.netloc)+'    '+unquote(p.path[1:]), self.BOOKMARK_TYPES[p.scheme])
        item.connect('activate', self.on_bookmark_click, f)
        menu.append(item)
    menu.append(Gtk.SeparatorMenuItem.new())
    item = self.create_menu_item('Quit', 'gtk-quit')
    item.connect('activate', Gtk.main_quit)
    menu.append(item)
    menu.show_all()

  def on_xml_changed(self, monitor, file, other_file, event_type):
    if event_type == Gio.FileMonitorEvent.CHANGES_DONE_HINT:
      print('XML changed, updating menu.')
      self.update_menu()

  def on_bookmark_click(self, widget, path):
    print("Opening '%s'." % path)
    subprocess.Popen([self.browser, path])

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Indicator app listing your recently edited folders on network servers')
  parser.add_argument('-c', '--count', type=int, metavar='N', default=20, help='maximum number of recent locations (default 20)')
  parser.add_argument('-f', '--file', metavar='FILE', default=os.getenv('HOME') + '/.local/share/recently-used.xbel', help='specify XML file to watch')
  parser.add_argument('--browser', metavar='EXECUTABLE', help='specify file browser to use')
  args = parser.parse_args()
  # Use default directory handler if no browser defined:
  if args.browser is None:
    try: browser = Gio.AppInfo.get_default_for_type('inode/directory', True).get_executable()
    except Exception:
      print('Failed to find a default file manager.')
      sys.exit(1)
  # Otherwise check that the specified browser exists:
  else:
    try: subprocess.check_call(['which', args.browser], stdout=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
      print("'%s' is not executable." % args.browser)
      sys.exit(1)
    browser = args.browser
  i = IndicatorRecentNetwork(args.count, args.file, browser)
  Gtk.main()
